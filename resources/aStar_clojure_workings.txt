; . . . . . 
; . . . . . 
; . x . . . 
; . w w w . 
; . w w . . 

(use '[clojure.data.priority-map])
(def directions [[0 -1] [-1 0] [0 1] [1 0]]) ;even
(def board {:width   5 
            :height  5 
            :blocked [ [1 2] ] ;[2 2] [3 2] ]
            :costs   (apply merge (map #(hash-map % 5) [ [1 3] [2 3] [3 3] [1 4] [2 4] ]))})

(defn- vec_add [ a b ] (mapv #(+ %1 %2) a b))

(defn- grid_neighbours [ cell ]
  (let [neighbours (if (zero? (mod (apply + cell) 2)) directions (reverse directions))]
    (mapv #(vec_add cell (nth neighbours %)) (range 4))))

(defn- in-bounds? [ cell graph ] 
  (let [{:keys [width height]} graph
        [x y]                  cell]
    (and (<= 0 x (dec width)) (<= 0 y (dec height)))))
    
(defn- passable? [ cell graph ]
  (not-any? #(= cell %) (:blocked graph)))
  
(defn- not_yet_visited [ neighbours visited graph ]
  (->> neighbours 
       (remove #(some? (visited %)))
       (filter #(in-bounds? % graph))
       (filter #(passable? % graph))
       vec))       
  
(defn path_to_cell [ cell paths ]
  (if (->> cell (get paths) some?)
    (loop [path [cell]]
      (let [from (last path)
            step (get paths from)]
        (if (or (nil? step) (false? step))
            (reverse path)
            (recur (conj path step)))))))
            
;; Breadth First

(defn breadth_first [ start graph ]
  (loop [frontier  [start]
         came_from {start false}]
    (if (empty? frontier)
        came_from
        (let [fronts (not_yet_visited (-> frontier first grid_neighbours) came_from graph)]
          (recur (apply conj (-> frontier rest vec) fronts) 
                 (apply merge came_from (map #(hash-map % (first frontier)) fronts)))))))
                 
(defn breadth_first_early [ start goal graph ]
  (loop [frontier [start]
         came_from  {start false}]
    (if (or (empty? frontier)
            (= goal (first frontier)))
        came_from
        (let [fronts (not_yet_visited (-> frontier first grid_neighbours) came_from graph)]
          (recur (apply conj (-> frontier rest vec) fronts) 
                 (apply merge came_from (map #(hash-map % (first frontier)) fronts)))))))
                 
;; Dijkstra's Uniform Cost

(defn- best_path? [from_cell to_cell cost_so_far graph]
  (let [old_cost (get cost_so_far to_cell)
        new_cost (+ (get cost_so_far from_cell) (-> graph :costs (get to_cell 1)))]
    (or (nil? old_cost) (< new_cost old_cost))))
    
(defn- priority_visited [ cell cost_so_far graph ]
  (->> (grid_neighbours cell)
       (filter #(in-bounds? % graph))
       (filter #(passable? % graph))
       ;; Filter out {cell cost} if cost >= cost_so_far
       (filter #(best_path? cell % cost_so_far graph))       
       (map #(priority-map % (+ (get cost_so_far cell 1) (get (:costs graph) % 1))))
       reverse
       (apply conj)))
         
(defn uniform_cost [start graph]
; FIXME - out of bounds and blocked start should return empty {}
  (if (and (in-bounds? goal graph) (passable? goal graph))
    (loop [frontier (priority-map start 0)
           came_from (hash-map start false)
           cost_so_far (hash-map start 0)]
      (if (empty? frontier)
          came_from
          (let [cell      (-> frontier first key)
                front     (priority_visited cell cost_so_far graph)
                new_frontier (dissoc frontier cell)]
            (recur (if (empty? front) new_frontier (conj new_frontier front))
                   (apply merge came_from (map #(hash-map (key %) cell) front))
                   (if (empty? front) cost_so_far (conj cost_so_far front))))))))
 
(defn- heuristic 
  "Manhattan distance on a square grid"
  ; return abs(a.x - b.x) + abs(a.y - b.y)
  [ a b ]
    (apply + (map #(-> %1 (- %2) Math/abs) a b)))

(defn- greedy_priority_visited [ cell goal came_from graph ]
  (->> (grid_neighbours cell)
       (remove #(some? (came_from %)))
       (filter #(in-bounds? % graph))
       (filter #(passable? % graph))
       (map #(priority-map % (heuristic % goal)))
       reverse
       (apply conj)))
       
(defn greedy_breadth_first [ start goal graph ]
; FIXME - out of bounds and blocked start should return empty {}
  (if (and (in-bounds? goal graph) (passable? goal graph))
    (loop [frontier (priority-map start 0)
           came_from (hash-map start false)]
          ; cost_so_far (hash-map start 0)]
      (if (or (= goal (-> frontier first key))
              (empty? frontier))
          came_from
          (let [cell      (-> frontier first key)
                front     (greedy_priority_visited cell goal came_from graph)
                new_frontier (dissoc frontier cell)]
            (recur (if (empty? front) new_frontier (conj new_frontier front))
                   (apply merge came_from (map #(hash-map (key %) cell) front))
                   ; (if (empty? front) cost_so_far (conj cost_so_far front))
                   ))))))
                   

         
(defn astar [start goal graph]
; FIXME - out of bounds and blocked start should return empty {}
  (if (and (in-bounds? goal graph) (passable? goal graph))
    (loop [frontier (priority-map start 0)
           came_from (hash-map start false)
           cost_so_far (hash-map start 0)]
      (if (or (= goal (-> frontier first key))
              (empty? frontier))
          came_from
          (let [cell          (-> frontier first key)
                new_costs     (priority_visited cell cost_so_far graph)
                fronts        (apply merge (map (fn [[k v]] (priority-map k (+ v (heuristic k goal)))) new_costs))
                new_frontier  (dissoc frontier cell)]
            (recur (if (empty? fronts) new_frontier (conj new_frontier fronts))
                   (apply merge came_from (map #(hash-map (key %) cell) new_costs))
                   (if (empty? new_costs) cost_so_far (conj cost_so_far new_costs))))))))
                   
                   
                   
                  

(defn draw_board [ board ]
  (for [y (range (:height board))]
    (prn (apply str (map (fn [x] (str (if (some #(= % [x y]) (:blocked board)) "x" (if (= 5 (get (:costs board) [x y])) "w" ".")) " ")) (range (:width board)))))))
    
(defn- dir_symbol [ to_cell from_cell ]
  (case from_cell 
    false? "H"
    nil? "_"
    (if (false? from_cell)
        "H"
        (let [[a b] to_cell
              [x y] from_cell]
          (if (< x a) "<" (if (> x a) ">" (if (< y b) "^" (if (< b y) "v" "?"))))))))
    
(defn draw_paths [ board came_from ]
  (for [y (range (:height board))]
    (prn 
      (apply str 
        (map 
          (fn [x] 
            (str (if (some #(= % [x y]) (:blocked board)) 
                     "x" 
                     (if (nil? (get came_from [x y])) 
                         "_"
                         (dir_symbol [x y] (get came_from [x y]))))
                  " "))
          (range (:width board)))))))
    
(defn- path_cost [ path board ]
  (apply + (map #(get (:costs board) % 1) (rest path))))
    
(defn draw_board_costs [ board came_from ]
  (for [y (range (:height board))]
    (prn 
      (apply str 
        (map 
          (fn [x] 
            (let [d (str "  " (if (some #(= % [x y]) (:blocked board)) "x" (path_cost (path_to_cell [x y] came_from) board)))]
              (subs d (- (count d) 3))))
          (range (:width board)))))))
        
;; OLD code
;(defn bordercells [w h]
;  (reduce conj
;    (for [x (range -1 (inc w)) y [-1 h]]
;      [x y])
;    (for [x [-1 w] y (range h)]
;      [x y])))

        
; Cleaner version???        
(let [start [0 0]
      goal  [10 10]
      graph board]
  (loop [frontier     (priority-map start 0)
         came_from    (hash-map start false)
         cost_so_far  (hash-map start 0)]
    (let [current (-> frontier first key)]
      (if (= current goal)
          came_from
          (recur ;frontier came_from cost_so_far
          
                           
          (loop [neighbours (grid_neighbours current)
                 frontier frontier
                 came_from came_from
                 cost_so_far cost_so_far]
            (let [next (first neighbours)]
              (if (nil? next)
                  [frontier came_from cost_so_far]
                  (let [new_cost (+ (get cost_so_far next 0) (get (:costs board) next 1))]
                    (if (or (nil? (get (cost_so_far))) (< new_cost (get cost_so_far next)))
                      (recur  
                        (rest neighbours)
                        (assoc frontier next (+ new_cost (heuristic goal next)))
                        (assoc came_from next current)
                        (assoc cost_so_far next new_cost))
                      (recur (rest neighbours) frontier came_from cost_so_far)))))
          
          )) ))))
            
(let [goal [10 10] current [0 0]]         
  (loop [neighbours (grid_neighbours [0 0])
         frontier (priority-map [0 0] 0)
         came_from (hash-map [0 0] false)
         cost_so_far (hash-map [0 0] 0)]
    (if (nil? neighbours)
        [frontier came_from cost_so_far]
        (let [next (first neighbours)
              new_cost (+ (get cost_so_far next 0) (get (:costs board) next 1))]
          (prn next)
          (recur (rest neighbours) frontier came_from cost_so_far)))))
          ;(if (or (nil? (get (cost_so_far))) (< new_cost (get cost_so_far next)))
          ;  (recur  
          ;    (rest neighbours)
          ;    (assoc frontier next (+ new_cost (heuristic goal next)))
          ;    (assoc came_from next current)
          ;    (assoc cost_so_far next new_cost))
            (recur (rest neighbours) frontier came_from cost_so_far))))))


        
        
        
        
        
        