(ns astar.maps)

(def usermap1 {:width   30 
               :height  15 
               :start   [8 7]
               :blocked [[3 3] [4 3] [3 4] [4 4] [3 5] [4 5] [3 6] [4 6] [3 7] [4 7] [3 8] [4 8] [3 9] [4 9] [3 10] [4 10] [3 11] [4 11]
                         [13 4] [14 4] [13 5] [14 5] [13 6] [14 6] [13 7] [14 7] [13 8] [14 8] [13 9] [14 9] [13 10] [14 10] [13 11] [14 11] [13 12] [14 12] [13 13] [14 13] [13 14] [14 14]
                         [21 0] [22 0] [21 1] [22 1] [21 2] [22 2] [21 3] [22 3] [21 4] [22 4] [21 5] [22 5] [23 5] [24 5] [25 5] [21 6] [22 6] [23 6] [24 6] [25 6]]})

(def terrainmap {:width 10 :height 10  :start [1 4]
                 :blocked (for [x (range 1 4) y (range 7 9)] [x y])
                 :costs (apply merge (map #(hash-map % 5) [[4 1] [5 1] [4 2] [5 2] [6 2] [4 3] [5 3] [6 3] [7 3] [3 4] [4 4] [5 4] [6 4] [7 4] [3 5] [4 5] [5 5] [6 5] [7 5] [4 6] [5 6] [6 6] [4 7] [5 7] [6 7] [4 8] [5 8]]))})

(def terrainmap2 {:width 15 :height 15 :start [2 9]
                  :costs (apply merge (map #(hash-map % 5) 
                    [[0 0] [1 0] [2 0] [0 1] [1 1] [2 1] [0 2] [1 2] [0 3] [1 3] [0 4] [1 4] [0 5] 
                     [0 12] [0 13] [1 13] [2 13] [0 14] [1 14] [2 14] [3 14]
                     [6 2] [7 2] [8 2] [9 2] 
                     [6 3] [7 3] [8 3] [9 3] 
                     [5 4] [6 4] [7 4] [8 4] [9 4] [10 4] 
                     [5 5] [6 5] [7 5] [8 5] [9 5] [10 5] 
                     [5 6] [6 6] [7 6] [8 6] [10 6] 
                     [5 7] [6 7] [8 7] [9 7] [10 7] 
                     [5 8] [6 8] [7 8] [8 8] [10 8] 
                     [5 9] [6 9] [8 9] [9 9] [10 9] 
                     [5 10] [6 10] [7 10] [8 10] [9 10] [10 10] 
                     [6 11] [7 11] [8 11] [9 11]
                     [6 12] [7 12] [8 12] [9 12]
                      ]))})
                  
(def blockedmap {:width 15 :height 15 :start [0 12] 
                 :blocked (apply merge 
                            (for [y [2 12] x (range 2 13)] [x y])
                            (for [y (range 3 12)] [12 y]))})
(def maze1
  [[1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1]
   [1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1]
   [1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1]
   [1 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 1]
   [1 0 1 0 1 0 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 0 1 0 1 0 1]
   [1 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 1 0 1]
   [1 0 1 1 1 0 1 0 1 1 1 0 1 1 1 1 1 0 1 1 1 0 1 0 1 0 1 0 1 0 1]
   [1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 1 0 1]
   [1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1]
   [1 0 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 1 0 1]
   [1 0 1 0 1 0 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 1]
   [1 0 0 0 1 0 0 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1]
   [1 0 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1]
   [1 0 1 0 1 0 1 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 1]
   [1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1]
   [1 0 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 1 0 1]
   [1 1 1 1 1 0 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 0 1 1 1 0 1]
   [1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 1 0 0 0 0 0 1]
   [1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 1 1 0 1]
   [1 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1 0 1]
   [1 0 1 1 1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 1 1 1 1 1 1 0 1 0 1 0 1]
   [1 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 1]
   [1 0 1 0 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 1 1 1 1 0 1 0 1]
   [1 0 1 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 1 0 1 0 1]
   [1 0 1 1 1 0 1 0 1 1 1 1 1 0 1 1 1 0 1 0 1 0 1 1 1 0 1 1 1 0 1]
   [1 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 1 0 0 0 1 0 1 0 1 0 0 0 0 0 1]
   [1 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 1 1 1 1 1 0 1 0 1 1 1 1 1 1 1]
   [1 0 1 0 0 0 0 0 1 0 1 0 1 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 1 0 1]
   [1 0 1 0 1 1 1 1 1 0 1 0 1 0 1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1]
   [1 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1]
   [1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1]])
   
(def map1 
  {:width 31 :height 31 :start [15 0]
   :blocked (remove nil? 
              (for [x (range 32) y (range 32)] 
                (if (= 1 (get-in maze1 [y x])) 
                    [x y])))})